version: '3.8'

services:
  # PHP Service
  app:
    build:
      context: .
      dockerfile: ./docker/php/Dockerfile.prod
    container_name: laravel-app-prod
    restart: unless-stopped
    volumes:
      - .:/var/www/html
      - ./docker/php/php.ini:/usr/local/etc/php/conf.d/local.ini
    environment:
      - "APP_ENV=production"
      - "APP_DEBUG=false"
    networks:
      - laravel-network-prod
    depends_on:
      - mysql
      - redis

  # Nginx Service
  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    container_name: laravel-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      # Uncomment jika SSL sudah tersedia
      # - "443:443"
    volumes:
      - .:/var/www/html
      - ./docker/nginx/conf.d/default-production.conf:/etc/nginx/conf.d/default.conf
      # Uncomment jika SSL sudah tersedia
      # - ./ssl:/etc/nginx/ssl
    networks:
      - laravel-network-prod
    depends_on:
      - app

  # MySQL Service
  mysql:
    image: mysql:8.0
    container_name: laravel-mysql-prod
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
    volumes:
      - mysql-data-prod:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    networks:
      - laravel-network-prod

  # Redis Service
  redis:
    image: redis:alpine
    container_name: laravel-redis-prod
    restart: unless-stopped
    volumes:
      - redis-data-prod:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - laravel-network-prod

networks:
  laravel-network-prod:
    driver: bridge

volumes:
  mysql-data-prod:
  redis-data-prod:
